{"version":3,"sources":["components/taskList/taskItems/buttons/button-importance/ButtonImportance.jsx","components/taskList/taskItems/buttons/button-active/ButtonActive.jsx","components/taskList/taskItems/TaskItem.jsx","components/taskList/TaskList.jsx","components/taskList/taskItems/buttons/button-disp-list/ButtonDispList.jsx","components/form/form.jsx","components/loader/loader.jsx","App.jsx"],"names":["ButtonImportance","id","importance","importanceTask","buttonText","onClick","PropTypes","number","isRequired","bool","func","ButtonActive","active","activeTask","TaskItem","name","deleteTask","style","fontWeight","color","className","ProTypes","string","TaskList","taskList","map","item","props","ButtonDispList","displayList","Form","addNewTask","useState","newTask","setInputNewTask","disabledButton","value","onChange","e","target","disabled","Loader","App","taskListState","setTaskList","displayedList","setDisplayedList","inputFilterValue","setInputFilterValue","isLoaded","setIsLoaded","useEffect","setTimeout","newTaskList","filter","includes","newTaskName","prevState","arrId","Math","max","apply","push","type","key","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.13e52353.chunk.js","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nexport const ButtonImportance = ({id, importance, importanceTask}) => {\r\n    const buttonText = (importance === false ? 'отметить как важное' : 'снять отметку как важное');\r\n    return (\r\n        <button onClick={() => importanceTask(id)}> {buttonText}</button>);\r\n};\r\n\r\nButtonImportance.PropTypes = {\r\n    id: PropTypes.number.isRequired,\r\n    importance: PropTypes.bool.isRequired,\r\n    importanceTask: PropTypes.func.isRequired\r\n};","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nexport const ButtonActive = ({id, active, activeTask}) => {\r\n    const buttonText = (active === false ? 'активировать задачу' : 'завершить задачу');\r\n    return (\r\n        <button onClick={() => activeTask(id)}> {buttonText}</button>);\r\n};\r\nButtonActive.PropTypes = {\r\n    id: PropTypes.number.isRequired,\r\n    active: PropTypes.bool.isRequired,\r\n    activeTask: PropTypes.func.isRequired\r\n};","import React from 'react';\r\nimport {ButtonImportance} from './buttons/button-importance/ButtonImportance';\r\nimport {ButtonActive} from './buttons/button-active/ButtonActive';\r\nimport PropTypes from 'prop-types';\r\n\r\n\r\nexport const TaskItem = ({id, importance, active, name, deleteTask, importanceTask, activeTask}) => {\r\n    const style = {\r\n        fontWeight: (importance === false ? 'normal' : 'bolder'),\r\n        color: (active === false ? 'rgb(168, 168, 168)' : 'black')\r\n    };\r\n\r\n    return (\r\n        <li className='line'>\r\n            <div className='tasks' style={style}> {name} </div>\r\n            <div className='buttonLine'>\r\n                < ButtonImportance importance={importance} id={id} importanceTask={importanceTask}\r\n                                   activeTask={activeTask}/>\r\n                <ButtonActive active={active} id={id} activeTask={activeTask}/>\r\n                <button onClick={() => deleteTask(id)}>удалить задачу</button>\r\n            </div>\r\n        </li>);\r\n\r\n\r\n};\r\n\r\nTaskItem.ProTypes = {\r\n    id: PropTypes.number.isRequired,\r\n    name: PropTypes.string.isRequired,\r\n    importance: PropTypes.bool.isRequired,\r\n    active: PropTypes.bool.isRequired,\r\n    deleteTask: PropTypes.func.isRequired,\r\n    importanceTask: PropTypes.func.isRequired,\r\n    activeTask: PropTypes.func.isRequired,\r\n};\r\n\r\n\r\n","import React from 'react';\r\nimport {TaskItem} from './taskItems/TaskItem';\r\nimport PropTypes, {shape} from 'prop-types';\r\n\r\nexport const TaskList = ({taskList = [], deleteTask, importanceTask, activeTask}) => {\r\n    return (\r\n        <ul> список задач\r\n            {taskList.map((item) => {\r\n                const {...props} = item;\r\n                return <TaskItem key={item.id} {...props} deleteTask={deleteTask}\r\n                                 importanceTask={importanceTask} activeTask={activeTask}/>;\r\n            })}\r\n        </ul>\r\n    );\r\n};\r\n\r\nTaskList.propTypes = {\r\n    taskList: PropTypes.arrayOf(\r\n        PropTypes.shape({\r\n            id: PropTypes.number.isRequired,\r\n            name: PropTypes.string.isRequired,\r\n            importance: PropTypes.bool.isRequired,\r\n            active: PropTypes.bool.isRequired\r\n        })\r\n    ).isRequired,\r\n    deleteTask: PropTypes.func.isRequired,\r\n    importanceTask: PropTypes.func.isRequired,\r\n    activeTask: PropTypes.func.isRequired,\r\n};","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nexport const ButtonDispList = ({displayList}) => {\r\n    return (\r\n        <div>\r\n            <button key={101} onClick={() => displayList('all')}>все задачи</button>\r\n            <button key={102} onClick={() => displayList('active')}>активные задачи</button>\r\n            <button key={103} onClick={() => displayList('completed')}>завершенные задачи</button>\r\n        </div>\r\n    );\r\n};\r\n\r\nButtonDispList.PropTypes = {\r\n    displayList: PropTypes.func.isRequired\r\n};\r\n","import React, {useState} from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nexport const Form = ({addNewTask}) => {\r\n    const [newTask, setInputNewTask] = useState('');\r\n\r\n    const inputNewTask = (e) =>setInputNewTask(e.target.value);\r\n\r\n    const disabledButton = (newTask === '');\r\n\r\n    return (\r\n        <div>\r\n            <input value={newTask} onChange={inputNewTask}/>\r\n            <button disabled={disabledButton} onClick={() => addNewTask(newTask)}>\r\n                добавить запись\r\n            </button>\r\n        </div>\r\n    );\r\n};\r\nForm.propTypes = {\r\n    addNewTask: PropTypes.func.isRequired\r\n};","import React from 'react';\r\n\r\nexport const Loader =() => <div className='loader'>\r\n    <div className=\"load\">Loading...</div></div>;","import React, {useState, Component, useEffect} from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport {TaskList} from './components/taskList/TaskList';\r\nimport {ButtonDispList} from './components/taskList/taskItems/buttons/button-disp-list/ButtonDispList';\r\nimport {Form} from './components/form/form';\r\nimport {Loader} from './components/loader/loader';\r\n\r\n\r\nconst App = () => {\r\n\r\n    const taskListState = [\r\n        {\r\n            id: 1,\r\n            name: 'learn js',\r\n            importance: true,\r\n            active: false\r\n        },\r\n        {\r\n            id: 2,\r\n            name: 'task2',\r\n            importance: false,\r\n            active: true\r\n        },\r\n        {\r\n            id: 3,\r\n            name: 'drink coffee',\r\n            importance: false,\r\n            active: false\r\n        },\r\n        {\r\n            id: 4,\r\n            name: 'learn react',\r\n            importance: true,\r\n            active: true\r\n        },\r\n    ];\r\n\r\n    const [taskList, setTaskList] = useState(null);\r\n    const [displayedList, setDisplayedList] = useState('all');\r\n    const [inputFilterValue, setInputFilterValue] = useState('');\r\n    const [isLoaded, setIsLoaded] = useState(false);\r\n\r\n    useEffect(() => {\r\n        setTimeout(() => {\r\n            setTaskList(taskListState);\r\n            setIsLoaded(true);\r\n        }, 2000);\r\n    }, []);\r\n\r\n\r\n    const importanceTask = (id) => {\r\n        setTaskList((prevState) => {\r\n            const newTaskList = prevState.map(item => {\r\n                if (item.id === id) {\r\n                    item.importance = (item.importance === false ? true : false);\r\n                }\r\n                return item;\r\n            });\r\n            return newTaskList;\r\n        });\r\n    };\r\n\r\n\r\n    const activeTask = (id) => {\r\n        setTaskList((prevState) => {\r\n            const newTaskList = prevState.map(item => {\r\n                if (item.id === id) {\r\n                    item.active = (item.active === false ? true : false);\r\n                }\r\n                return item;\r\n            });\r\n            return newTaskList;\r\n        });\r\n    };\r\n\r\n\r\n    const deleteTask = (id) => {\r\n        setTaskList((prevState) => {\r\n            const newTaskList = (prevState.filter(item => item.id !== id));\r\n            return newTaskList;\r\n        });\r\n    };\r\n\r\n    const displayList = (key) => setDisplayedList(key);\r\n    const inputHandler = (e) => setInputFilterValue(e.target.value);\r\n    const filteredTaskList = () => taskList.filter(item => item.name.includes(inputFilterValue));\r\n\r\n    const addNewTask = (newTaskName) => {\r\n        setTaskList((prevState) => {\r\n            const arrId = prevState.map(item => item.id);\r\n            const newId = Math.max.apply(null, arrId) + 1;\r\n\r\n            const newTask = {\r\n                id: newId,\r\n                name: newTaskName,\r\n                importance: true,\r\n                active: true\r\n            };\r\n            prevState.push(newTask);\r\n            return prevState;\r\n        });\r\n    };\r\n\r\n    let newTaskList = null;\r\n\r\n    if (inputFilterValue !== '') {\r\n        newTaskList = filteredTaskList(taskList, inputFilterValue);\r\n    } else if (displayedList === 'completed') {\r\n        newTaskList = taskList.filter(item => item.active === false);\r\n    } else if (displayedList === 'active') {\r\n        newTaskList = taskList.filter(item => item.active === true);\r\n    } else {\r\n        newTaskList = taskList;\r\n    }\r\n\r\n\r\n    if (!isLoaded) {\r\n        return <Loader/>;\r\n    } else {\r\n        return (\r\n            <div>\r\n                <div className='panel'>\r\n                    <div>\r\n                        <Form addNewTask={addNewTask}/>\r\n                    </div>\r\n                    <input onChange={inputHandler} value={inputFilterValue} type=\"text\"/>\r\n                    <div>\r\n                        <ButtonDispList displayList={displayList}/>\r\n                    </div>\r\n                </div>\r\n                <div>\r\n                    <TaskList taskList={newTaskList} deleteTask={deleteTask}\r\n                              importanceTask={importanceTask} activeTask={activeTask}/>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n};\r\n\r\n\r\nReactDOM.render(\r\n    <App/>,\r\n    document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}